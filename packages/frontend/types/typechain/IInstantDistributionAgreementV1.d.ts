/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IInstantDistributionAgreementV1Interface
  extends ethers.utils.Interface {
  functions: {
    "agreementType()": FunctionFragment;
    "approveSubscription(address,address,uint32,bytes)": FunctionFragment;
    "calculateDistribution(address,address,uint32,uint256)": FunctionFragment;
    "claim(address,address,uint32,address,bytes)": FunctionFragment;
    "createIndex(address,uint32,bytes)": FunctionFragment;
    "deleteSubscription(address,address,uint32,address,bytes)": FunctionFragment;
    "distribute(address,uint32,uint256,bytes)": FunctionFragment;
    "getIndex(address,address,uint32)": FunctionFragment;
    "getSubscription(address,address,uint32,address)": FunctionFragment;
    "getSubscriptionByID(address,bytes32)": FunctionFragment;
    "listSubscriptions(address,address)": FunctionFragment;
    "realtimeBalanceOf(address,address,uint256)": FunctionFragment;
    "revokeSubscription(address,address,uint32,bytes)": FunctionFragment;
    "updateIndex(address,uint32,uint128,bytes)": FunctionFragment;
    "updateSubscription(address,uint32,address,uint128,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "agreementType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveSubscription",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDistribution",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createIndex",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSubscription",
    values: [string, string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndex",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionByID",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listSubscriptions",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSubscription",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIndex",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscription",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "agreementType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscription",
    data: BytesLike
  ): Result;

  events: {
    "IndexCreated(address,address,uint32,bytes)": EventFragment;
    "IndexDistributionClaimed(address,address,uint32,address,uint256)": EventFragment;
    "IndexSubscribed(address,address,uint32,address,bytes)": EventFragment;
    "IndexUnitsUpdated(address,address,uint32,address,uint128,bytes)": EventFragment;
    "IndexUnsubscribed(address,address,uint32,address,bytes)": EventFragment;
    "IndexUpdated(address,address,uint32,uint128,uint128,uint128,uint128,bytes)": EventFragment;
    "SubscriptionApproved(address,address,address,uint32,bytes)": EventFragment;
    "SubscriptionDistributionClaimed(address,address,address,uint32,uint256)": EventFragment;
    "SubscriptionRevoked(address,address,address,uint32,bytes)": EventFragment;
    "SubscriptionUnitsUpdated(address,address,address,uint32,uint128,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IndexCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexDistributionClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexSubscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexUnitsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexUnsubscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionApproved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionDistributionClaimed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionUnitsUpdated"): EventFragment;
}

export class IInstantDistributionAgreementV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IInstantDistributionAgreementV1Interface;

  functions: {
    agreementType(overrides?: CallOverrides): Promise<[string]>;

    approveSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateDistribution(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        actualAmount: BigNumber;
        newIndexValue: BigNumber;
      }
    >;

    claim(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIndex(
      token: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distribute(
      token: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIndex(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        indexValue: BigNumber;
        totalUnitsApproved: BigNumber;
        totalUnitsPending: BigNumber;
      }
    >;

    getSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        exist: boolean;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    getSubscriptionByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber, BigNumber] & {
        publisher: string;
        indexId: number;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    listSubscriptions(
      token: string,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], BigNumber[]] & {
        publishers: string[];
        indexIds: number[];
        unitsList: BigNumber[];
      }
    >;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    revokeSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIndex(
      token: string,
      indexId: BigNumberish,
      indexValue: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSubscription(
      token: string,
      indexId: BigNumberish,
      subscriber: string,
      units: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  agreementType(overrides?: CallOverrides): Promise<string>;

  approveSubscription(
    token: string,
    publisher: string,
    indexId: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateDistribution(
    token: string,
    publisher: string,
    indexId: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      actualAmount: BigNumber;
      newIndexValue: BigNumber;
    }
  >;

  claim(
    token: string,
    publisher: string,
    indexId: BigNumberish,
    subscriber: string,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIndex(
    token: string,
    indexId: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteSubscription(
    token: string,
    publisher: string,
    indexId: BigNumberish,
    subscriber: string,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distribute(
    token: string,
    indexId: BigNumberish,
    amount: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIndex(
    token: string,
    publisher: string,
    indexId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      exist: boolean;
      indexValue: BigNumber;
      totalUnitsApproved: BigNumber;
      totalUnitsPending: BigNumber;
    }
  >;

  getSubscription(
    token: string,
    publisher: string,
    indexId: BigNumberish,
    subscriber: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber] & {
      exist: boolean;
      approved: boolean;
      units: BigNumber;
      pendingDistribution: BigNumber;
    }
  >;

  getSubscriptionByID(
    token: string,
    agreementId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean, BigNumber, BigNumber] & {
      publisher: string;
      indexId: number;
      approved: boolean;
      units: BigNumber;
      pendingDistribution: BigNumber;
    }
  >;

  listSubscriptions(
    token: string,
    subscriber: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], number[], BigNumber[]] & {
      publishers: string[];
      indexIds: number[];
      unitsList: BigNumber[];
    }
  >;

  realtimeBalanceOf(
    token: string,
    account: string,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dynamicBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
    }
  >;

  revokeSubscription(
    token: string,
    publisher: string,
    indexId: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIndex(
    token: string,
    indexId: BigNumberish,
    indexValue: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSubscription(
    token: string,
    indexId: BigNumberish,
    subscriber: string,
    units: BigNumberish,
    ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agreementType(overrides?: CallOverrides): Promise<string>;

    approveSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateDistribution(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        actualAmount: BigNumber;
        newIndexValue: BigNumber;
      }
    >;

    claim(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    createIndex(
      token: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deleteSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    distribute(
      token: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getIndex(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        exist: boolean;
        indexValue: BigNumber;
        totalUnitsApproved: BigNumber;
        totalUnitsPending: BigNumber;
      }
    >;

    getSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        exist: boolean;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    getSubscriptionByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, BigNumber, BigNumber] & {
        publisher: string;
        indexId: number;
        approved: boolean;
        units: BigNumber;
        pendingDistribution: BigNumber;
      }
    >;

    listSubscriptions(
      token: string,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], number[], BigNumber[]] & {
        publishers: string[];
        indexIds: number[];
        unitsList: BigNumber[];
      }
    >;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dynamicBalance: BigNumber;
        deposit: BigNumber;
        owedDeposit: BigNumber;
      }
    >;

    revokeSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    updateIndex(
      token: string,
      indexId: BigNumberish,
      indexValue: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    updateSubscription(
      token: string,
      indexId: BigNumberish,
      subscriber: string,
      units: BigNumberish,
      ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    IndexCreated(
      token?: string | null,
      publisher?: string | null,
      indexId?: BigNumberish | null,
      userData?: null
    ): TypedEventFilter<
      [string, string, number, string],
      { token: string; publisher: string; indexId: number; userData: string }
    >;

    IndexDistributionClaimed(
      token?: string | null,
      publisher?: string | null,
      indexId?: BigNumberish | null,
      subscriber?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber],
      {
        token: string;
        publisher: string;
        indexId: number;
        subscriber: string;
        amount: BigNumber;
      }
    >;

    IndexSubscribed(
      token?: string | null,
      publisher?: string | null,
      indexId?: BigNumberish | null,
      subscriber?: null,
      userData?: null
    ): TypedEventFilter<
      [string, string, number, string, string],
      {
        token: string;
        publisher: string;
        indexId: number;
        subscriber: string;
        userData: string;
      }
    >;

    IndexUnitsUpdated(
      token?: string | null,
      publisher?: string | null,
      indexId?: BigNumberish | null,
      subscriber?: null,
      units?: null,
      userData?: null
    ): TypedEventFilter<
      [string, string, number, string, BigNumber, string],
      {
        token: string;
        publisher: string;
        indexId: number;
        subscriber: string;
        units: BigNumber;
        userData: string;
      }
    >;

    IndexUnsubscribed(
      token?: string | null,
      publisher?: string | null,
      indexId?: BigNumberish | null,
      subscriber?: null,
      userData?: null
    ): TypedEventFilter<
      [string, string, number, string, string],
      {
        token: string;
        publisher: string;
        indexId: number;
        subscriber: string;
        userData: string;
      }
    >;

    IndexUpdated(
      token?: string | null,
      publisher?: string | null,
      indexId?: BigNumberish | null,
      oldIndexValue?: null,
      newIndexValue?: null,
      totalUnitsPending?: null,
      totalUnitsApproved?: null,
      userData?: null
    ): TypedEventFilter<
      [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ],
      {
        token: string;
        publisher: string;
        indexId: number;
        oldIndexValue: BigNumber;
        newIndexValue: BigNumber;
        totalUnitsPending: BigNumber;
        totalUnitsApproved: BigNumber;
        userData: string;
      }
    >;

    SubscriptionApproved(
      token?: string | null,
      subscriber?: string | null,
      publisher?: null,
      indexId?: null,
      userData?: null
    ): TypedEventFilter<
      [string, string, string, number, string],
      {
        token: string;
        subscriber: string;
        publisher: string;
        indexId: number;
        userData: string;
      }
    >;

    SubscriptionDistributionClaimed(
      token?: string | null,
      subscriber?: string | null,
      publisher?: null,
      indexId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber],
      {
        token: string;
        subscriber: string;
        publisher: string;
        indexId: number;
        amount: BigNumber;
      }
    >;

    SubscriptionRevoked(
      token?: string | null,
      subscriber?: string | null,
      publisher?: null,
      indexId?: null,
      userData?: null
    ): TypedEventFilter<
      [string, string, string, number, string],
      {
        token: string;
        subscriber: string;
        publisher: string;
        indexId: number;
        userData: string;
      }
    >;

    SubscriptionUnitsUpdated(
      token?: string | null,
      subscriber?: string | null,
      publisher?: null,
      indexId?: null,
      units?: null,
      userData?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber, string],
      {
        token: string;
        subscriber: string;
        publisher: string;
        indexId: number;
        units: BigNumber;
        userData: string;
      }
    >;
  };

  estimateGas: {
    agreementType(overrides?: CallOverrides): Promise<BigNumber>;

    approveSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateDistribution(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIndex(
      token: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distribute(
      token: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIndex(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listSubscriptions(
      token: string,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIndex(
      token: string,
      indexId: BigNumberish,
      indexValue: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSubscription(
      token: string,
      indexId: BigNumberish,
      subscriber: string,
      units: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agreementType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateDistribution(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIndex(
      token: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distribute(
      token: string,
      indexId: BigNumberish,
      amount: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIndex(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionByID(
      token: string,
      agreementId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listSubscriptions(
      token: string,
      subscriber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realtimeBalanceOf(
      token: string,
      account: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeSubscription(
      token: string,
      publisher: string,
      indexId: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIndex(
      token: string,
      indexId: BigNumberish,
      indexValue: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSubscription(
      token: string,
      indexId: BigNumberish,
      subscriber: string,
      units: BigNumberish,
      ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
